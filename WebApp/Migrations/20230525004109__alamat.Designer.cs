// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApp.Data;

#nullable disable

namespace WebApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230525004109__alamat")]
    partial class _alamat
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ShareModel.Alamat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CalonSiswaId")
                        .HasColumnType("int");

                    b.Property<string>("Jalan")
                        .HasColumnType("longtext");

                    b.Property<string>("Kecamatan")
                        .HasColumnType("longtext");

                    b.Property<string>("Keluarahan")
                        .HasColumnType("longtext");

                    b.Property<string>("RT")
                        .HasColumnType("longtext");

                    b.Property<string>("RW")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CalonSiswaId")
                        .IsUnique();

                    b.ToTable("Alamat");
                });

            modelBuilder.Entity("ShareModel.CalonPesertaDidik", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AnakKe")
                        .HasColumnType("int");

                    b.Property<int?>("AyahId")
                        .HasColumnType("int");

                    b.Property<int?>("IbuId")
                        .HasColumnType("int");

                    b.Property<int>("JenisKelamin")
                        .HasColumnType("int");

                    b.Property<string>("KKS")
                        .HasColumnType("longtext");

                    b.Property<string>("KPS")
                        .HasColumnType("longtext");

                    b.Property<int>("Kepercayaan")
                        .HasColumnType("int");

                    b.Property<int>("Kewarganegaraan")
                        .HasColumnType("int");

                    b.Property<int?>("KontakId")
                        .HasColumnType("int");

                    b.Property<int>("ModaTransportasi")
                        .HasColumnType("int");

                    b.Property<string>("ModaTransportasiLain")
                        .HasColumnType("longtext");

                    b.Property<string>("NISN")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nama")
                        .HasColumnType("longtext");

                    b.Property<string>("Negara")
                        .HasColumnType("longtext");

                    b.Property<string>("PIP")
                        .HasColumnType("longtext");

                    b.Property<int?>("PeriodikId")
                        .HasColumnType("int");

                    b.Property<bool>("TK")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateOnly>("TanggalLahir")
                        .HasColumnType("date");

                    b.Property<string>("TempatLahir")
                        .HasColumnType("longtext");

                    b.Property<int>("TempatTinggal")
                        .HasColumnType("int");

                    b.Property<string>("TempatTinggalLain")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AyahId");

                    b.HasIndex("IbuId");

                    b.HasIndex("KontakId");

                    b.HasIndex("PeriodikId");

                    b.ToTable("CalonPesertaDidik");
                });

            modelBuilder.Entity("ShareModel.ItemPersyaratan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CalonPesertaDidikId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasColumnType("longtext");

                    b.Property<string>("Jawaban")
                        .HasColumnType("longtext");

                    b.Property<int>("PersyaratanId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CalonPesertaDidikId");

                    b.HasIndex("PersyaratanId");

                    b.ToTable("ItemPersyaratan");
                });

            modelBuilder.Entity("ShareModel.Kontak", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("HP")
                        .HasColumnType("longtext");

                    b.Property<string>("Telepon")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Kontak");
                });

            modelBuilder.Entity("ShareModel.OrangTua", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NIK")
                        .HasColumnType("longtext");

                    b.Property<string>("Nama")
                        .HasColumnType("longtext");

                    b.Property<int>("Pekerjaan")
                        .HasColumnType("int");

                    b.Property<int>("Pendidikan")
                        .HasColumnType("int");

                    b.Property<int>("Penghasilan")
                        .HasColumnType("int");

                    b.Property<int>("TahunLahir")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("OrangTua");
                });

            modelBuilder.Entity("ShareModel.Periodik", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("Berat")
                        .HasColumnType("double");

                    b.Property<double>("JarakKeSekolah")
                        .HasColumnType("double");

                    b.Property<int>("JumlahSaudara")
                        .HasColumnType("int");

                    b.Property<double>("LingkarKepala")
                        .HasColumnType("double");

                    b.Property<double>("Tinggi")
                        .HasColumnType("double");

                    b.Property<TimeSpan>("WaktuTempuh")
                        .HasColumnType("time(6)");

                    b.HasKey("Id");

                    b.ToTable("Periodik");
                });

            modelBuilder.Entity("ShareModel.Persyaratan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsUpload")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Persyaratan");
                });

            modelBuilder.Entity("WebApp.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShareModel.Alamat", b =>
                {
                    b.HasOne("ShareModel.CalonPesertaDidik", "CalonSiswa")
                        .WithOne("Alamat")
                        .HasForeignKey("ShareModel.Alamat", "CalonSiswaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CalonSiswa");
                });

            modelBuilder.Entity("ShareModel.CalonPesertaDidik", b =>
                {
                    b.HasOne("ShareModel.OrangTua", "Ayah")
                        .WithMany()
                        .HasForeignKey("AyahId");

                    b.HasOne("ShareModel.OrangTua", "Ibu")
                        .WithMany()
                        .HasForeignKey("IbuId");

                    b.HasOne("ShareModel.Kontak", "Kontak")
                        .WithMany()
                        .HasForeignKey("KontakId");

                    b.HasOne("ShareModel.Periodik", "Periodik")
                        .WithMany()
                        .HasForeignKey("PeriodikId");

                    b.Navigation("Ayah");

                    b.Navigation("Ibu");

                    b.Navigation("Kontak");

                    b.Navigation("Periodik");
                });

            modelBuilder.Entity("ShareModel.ItemPersyaratan", b =>
                {
                    b.HasOne("ShareModel.CalonPesertaDidik", null)
                        .WithMany("Persyaratan")
                        .HasForeignKey("CalonPesertaDidikId");

                    b.HasOne("ShareModel.Persyaratan", "Persyaratan")
                        .WithMany()
                        .HasForeignKey("PersyaratanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Persyaratan");
                });

            modelBuilder.Entity("ShareModel.CalonPesertaDidik", b =>
                {
                    b.Navigation("Alamat");

                    b.Navigation("Persyaratan");
                });
#pragma warning restore 612, 618
        }
    }
}
